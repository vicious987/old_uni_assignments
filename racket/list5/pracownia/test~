#lang racket
(define (var? x)
  (symbol? x))
(define (var x) x)
(define (var-name x) x)
(define (var=? x y)
  (eq? x y))

(define a (var 'a))
(define b (var 'b))
(define c (var 'c))
(define d (var 'd))
(define e (var 'e))
(define f (var 'f))
(define g (var 'g))
(define h (var 'h))

(define cl1 (list a b c d))
(define cl2 (list e f g h))

(define (is-x-in-cl x cl)
  (ormap (lambda (y) (var=? x y)) cl))

(define (trv claus1 claus2)
  (ormap (lambda (x) (is-x-in-cl x claus2)) claus1))

(define (common-vars claus1 claus2)
  (filter (lambda (x) (is-x-in-cl x claus2)) claus1))

(common-vars cl1 cl2)


(define (bla x)
  (let* ([d1 10]
         [d2 (+ d1 1)]
         )
    (* x d2)))
